
TOKEN=pxE2GbzcOeW2_En_LJ59tXSNvQdQy7owoKzkj-AfVHUYOyMKaJqUbQDZiabOFTJxUotpqIZ6IyEN_elKE-51mg==
ORG=netmon


echo "measurements"
echo "===================="
curl  --request POST \
  http://localhost:8186/api/v2/query?org=$ORG \
  --header "Authorization: Token $TOKEN" \
  --header 'Accept: application/csv' \
  --header 'Content-type: application/vnd.flux' \
  --data ' 
import "influxdata/influxdb/schema"

schema.measurements(bucket: "bucket1")
'


echo "field keys"
echo "===================="
curl  --request POST \
  http://localhost:8186/api/v2/query?org=$ORG \
  --header "Authorization: Token $TOKEN" \
  --header 'Accept: application/csv' \
  --header 'Content-type: application/vnd.flux' \
  --data ' 
import "influxdata/influxdb/schema"

schema.fieldKeys(bucket: "bucket1")
'


echo "tag keys"
echo "===================="
curl  --request POST \
  http://localhost:8186/api/v2/query?org=$ORG \
  --header "Authorization: Token $TOKEN" \
  --header 'Accept: application/csv' \
  --header 'Content-type: application/vnd.flux' \
  --data ' 
import "influxdata/influxdb/schema"

schema.tagKeys(bucket: "bucket1")
'

echo "tag values"
echo "===================="
curl --request POST \
  http://localhost:8186/api/v2/query?org=$ORG  \
  --header "Authorization: Token $TOKEN" \
  --header 'Accept: application/csv' \
  --header 'Content-type: application/vnd.flux' \
  --data ' 
import "influxdata/influxdb/schema"

schema.tagValues(bucket: "bucket1", tag: "device")
'


echo "interface data"
curl --request POST \
  http://localhost:8186/api/v2/query?org=$ORG \
  --header "Authorization: Token $TOKEN" \
  --header 'Accept: application/csv' \
  --header 'Content-type: application/vnd.flux' \
  --data ' from(bucket: "bucket1")
           |> range(start: -10m)
         '




#
#           from(bucket: "bucket1")
#           |> range(start: -2h)
#           |> filter(fn: (r) => r._measurement == "/interfaces/")
#           |> keep(columns: ["device"])
#           |> unique(column: "device")
#         '
#           |> map(fn: (r) => ({ device: r.device }))

#           |> findColumn(
#               fn: (key) => key._field == "device",
#               column: "_value"
#             )
